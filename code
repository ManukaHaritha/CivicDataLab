
const axios = require('axios').default;
//const { ISO_8601 } = require('moment/moment');
const mongoose = require('mongoose');
const moment=require('moment-timezone');

// Establish MongoDB connection
mongoose.connect('mongodb://localhost/GeoDb', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
  .then(() => {
    console.log('Connected to MongoDB');
    // Proceed with data retrieval and storage
    fetchDataAndStore();
  })
  .catch((error) => {
    console.error('Failed to connect to MongoDB', error);
  });

// Define the earthquake schema
const earthquakeSchema = new mongoose.Schema({
  datetime: { type: Date, required: true },
  region: { type: String, required: true },
  magnitude: { type: Number, required: true },
  location: {
    latitude: { type: Number, required: true },
    longitude: { type: Number, required: true }
  }
});

const Earthquake = mongoose.model('Earthquake', earthquakeSchema);

// Fetch data from the API and store in MongoDB
async function fetchDataAndStore() {
  try {
    // Make HTTP GET request to the API endpoint
    const response = await axios.get('https://data.bmkg.go.id/DataMKG/TEWS/gempadirasakan.json');

    // Extract earthquake data from the API response
    const { gempa } = response.data.Infogempa;
    const earthquakes = [];

    // Iterate over the earthquakes and validate and transform the datetime field
    for (const earthquakeData of gempa) {
      const datetimeString = earthquakeData.Tanggal + ' ' + earthquakeData.Jam;

      // Handle WIB offset and parse the date
try {
    const datetime = moment(datetimeString, 'DD MMM YYYY HH:mm:ss Z [WIB]').toDate();
    // ...
  } catch (error) {
    console.warn(`Invalid date for earthquake: ${datetimeString}`);
    continue;
  }
      const earthquake = new Earthquake({
       datetime:new Date(earthquakeData.DateTime),
        region: earthquakeData.Wilayah,
        magnitude: parseFloat(earthquakeData.Magnitude),
        location: {
          latitude: parseFloat(earthquakeData.Lintang),
          longitude: parseFloat(earthquakeData.Bujur),
        },
      });

      earthquakes.push(earthquake);
    }


    // Establish MongoDB connection
    await mongoose.connect('mongodb://localhost/GeoDb', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });

    // Save each valid earthquake document to the MongoDB collection
    for (const earthquake of earthquakes) {
      await earthquake.save();
    }

    console.log('Earthquake data stored successfully.');
  } catch (error) {
    console.error('Failed to fetch or store earthquake data:', error);
  } finally {
    // Close MongoDB connection
    mongoose.connection.close();
  }
}









